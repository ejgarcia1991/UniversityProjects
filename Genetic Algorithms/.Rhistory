popSize = 1000, maxiter = 50,
elitism = 50,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_rsMutation,
pmutation = 0.1,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_waCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
#optim=TRUE,
selection = gareal_tourSelection,
seed=15334
)
GA1 <- ga(type = "real-valued",
fitness =  function(x) -Rosenbrock(x),
lower = rep(-100, dimension), upper = rep(100, dimension),
popSize = 1000, maxiter = 50,
elitism = 50,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_rsMutation,
pmutation = 0.1,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_waCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
#optim=TRUE,
selection = gareal_lrSelection,
seed=15334
)
GA1 <- ga(type = "real-valued",
fitness =  function(x) -Rosenbrock(x),
lower = rep(-100, dimension), upper = rep(100, dimension),
popSize = 2000, maxiter = 50,
elitism = 200,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_rsMutation,
pmutation = 0.1,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_waCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
#optim=TRUE,
selection = gareal_lrSelection,
seed=15334
)
GA1 <- ga(type = "real-valued",
fitness =  function(x) -Rosenbrock(x),
lower = rep(-100, dimension), upper = rep(100, dimension),
popSize = 2000, maxiter = 200,
elitism = 200,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_rsMutation,
pmutation = 0.1,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_waCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_lrSelection,
seed=15334
)
plot(GA1)
### bag-genalg.R file ###
library(genalg) # load genalg package
source("functions.R") # load the profit function
# genetic algorithm search for bag prices:
D=5 # dimension (number of prices)
MaxPrice=1000
Dim=ceiling(log(MaxPrice,2)) # size of each price (=10)
size=D*Dim # total number of bits (=50)
intbin=function(x) # convert binary to integer
{ sum(2^(which(rev(x==1))-1)) }
bintbin=function(x) # convert binary to D prices
{ # note: D and Dim need to be set outside this function
s=vector(length=D)
for(i in 1:D) # convert x into s:
{ ini=(i-1)*Dim+1;end=ini+Dim-1
s[i]=intbin(x[ini:end])
}
return(s)
}
bprofit=function(x) # profit for binary x
{ s=bintbin(x)
s=ifelse(s>MaxPrice,MaxPrice,s) # repair!
f=-profit(s) # minimization task!
return(f)
}
# genetic algorithm execution:
G=rbga.bin(size=size,popSize=50,iters=100,zeroToOneRatio=1,evalFunc=bprofit,elitism=1)
# show results:
b=which.min(G$evaluations) # best individual
cat("best:",bintbin(G$population[b,]),"f:",-G$evaluations[b],
"\n")
pdf("genalg1.pdf") # personalized plot of G results
plot(-G$best,type="l",lwd=2,ylab="profit",xlab="generations")
lines(-G$mean,lty=2,lwd=2)
legend("bottomright",c("best","mean"),lty=1:2,lwd=2)
dev.off()
summary(G,echo=TRUE) # same as summary.rbga
GA1 <- ga(type = "real-valued",
fitness =  function(x) -maxsin(x),
#fitness =  function(x) -fnHim2(x),
lower = rep(-512, dimension), upper = rep(512, dimension),
popSize = 300, maxiter = 50,
elitism = 50,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_powMutation,
pmutation = 0.05,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_blxCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_tourSelection,
seed=15334
)
library(GA)
dimension <- 16
GA1 <- ga(type = "real-valued",
fitness =  function(x) -maxsin(x),
#fitness =  function(x) -fnHim2(x),
lower = rep(-512, dimension), upper = rep(512, dimension),
popSize = 300, maxiter = 50,
elitism = 50,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_powMutation,
pmutation = 0.05,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_blxCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_tourSelection,
seed=15334
)
maxsin=function(x) -sin(pi*(intbin(x))/(2^D))
G=rbga.bin(size=D,popSize=20,iters=100,evalFunc=maxsin,elitism=1)
summary(G,echo=TRUE)
-G$best
G=rbga.bin(size=D,popSize=20,iters=100,evalFunc=-maxsin,elitism=1)
maxsin=function(x) sin(pi*(intbin(x))/(2^D))
G=rbga.bin(size=D,popSize=20,iters=100,evalFunc=maxsin,elitism=1)
summary(G,echo=TRUE)
-G$best
maxsin=function(x) -sin(pi*(intbin(x))/(2^D))
G=rbga.bin(size=D,popSize=20,iters=100,evalFunc=maxsin,elitism=1)
summary(G,echo=TRUE)
D=16
G=rbga.bin(size=D,popSize=20,iters=100,evalFunc=maxsin,elitism=1)
summary(G,echo=TRUE)
dimension <- 2
GA1 <- ga(type = "real-valued",
fitness =  function(x) -eggholder(x),
#fitness =  function(x) -fnHim2(x),
lower = rep(-512, dimension), upper = rep(512, dimension),
popSize = 300, maxiter = 50,
elitism = 50,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_powMutation,
pmutation = 0.05,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_blxCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_tourSelection,
seed=15334
)
eggholder=function(pop) -(pop[2] + c1)*sin(sqrt(abs((pop[2]+pop[1])/c2+c1)))-pop[1]*sin(sqrt(abs(pop[1]-pop[2]+c1))) #eval function
GA1 <- ga(type = "real-valued",
fitness =  function(x) -eggholder(x),
#fitness =  function(x) -fnHim2(x),
lower = rep(-512, dimension), upper = rep(512, dimension),
popSize = 300, maxiter = 50,
elitism = 50,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_powMutation,
pmutation = 0.05,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_blxCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_tourSelection,
seed=15334
)
#5.4
D=2
set.seed(123)
c1=sample(100,1)
set.seed(1236)
c2=sample(100,1)
GA1 <- ga(type = "real-valued",
fitness =  function(x) -eggholder(x),
#fitness =  function(x) -fnHim2(x),
lower = rep(-512, dimension), upper = rep(512, dimension),
popSize = 300, maxiter = 50,
elitism = 50,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_powMutation,
pmutation = 0.05,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_blxCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_tourSelection,
seed=15334
)
summary(GA1)
plot(GA1)
dimension <- 2
GA1 <- ga(type = "real-valued",
fitness =  function(x) eggholder(x),
#fitness =  function(x) -fnHim2(x),
lower = rep(-512, dimension), upper = rep(512, dimension),
popSize = 300, maxiter = 50,
elitism = 50,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_powMutation,
pmutation = 0.05,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_blxCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_tourSelection,
seed=15334
)
dimension <- 2
GA1 <- ga(type = "real-valued",
fitness =  function(x) -eggholder(x),
#fitness =  function(x) -fnHim2(x),
lower = rep(-512, dimension), upper = rep(512, dimension),
popSize = 300, maxiter = 50,
elitism = 50,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_powMutation,
pmutation = 0.05,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_blxCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_tourSelection,
seed=15334
)
plot(GA1)
# instalar paquete TSP
library(TSP)
#cargamos el mapa
mapa <-read_TSPLIB("ch150.tsp")
#"ch150.tsp"
#"eil101.tsp"
#""berlin52.tsp""
#mostrar el mapa
plot(mapa,xlab = "coord x", ylab = "coord y")
algor = "repetitive_nn"
tour<-solve_TSP(mapa,method=algor)
# mostrar el recorrido y su costo
as.integer(tour)
#grafico
plot(mapa,tour, xlab = "coord x", ylab = "coord y")
# definicion de la funcion objetivo
Rosenbrock <- function(vector){
vector1<-vector+1
sum<-0
for(i in 1:(length(vector)-1)){
sum<-sum + (100*(vector1[i]^2-vector1[i+1])^2+(vector1[i]-1)^2)
}
return(sum)
}
dimension <- 1000
GA1 <- ga(type = "real-valued",
fitness =  function(x) -Rosenbrock(x),
lower = rep(-100, dimension), upper = rep(100, dimension),
popSize = 2000, maxiter = 200,
elitism = 200,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_rsMutation,
pmutation = 0.1,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_waCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_lrSelection,
seed=15334
)
GA1 <- ga(type = "real-valued",
fitness =  function(x) -Rosenbrock(x),
lower = rep(-100, dimension), upper = rep(100, dimension),
popSize = 2000, maxiter = 200,
elitism = 200,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_rsMutation,
pmutation = 0.1,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_waCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
#optim=TRUE,
selection = gareal_lrSelection,
seed=15334
)
GA1 <- ga(type = "real-valued",
fitness =  function(x) -Rosenbrock(x),
lower = rep(-100, dimension), upper = rep(100, dimension),
popSize = 2000, maxiter = 200,
elitism = 200,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_rsMutation,
pmutation = 0.1,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_waCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_lrSelection,
seed=15334
)
plot(GA1)
GA1 <- ga(type = "real-valued",
fitness =  function(x) -Rosenbrock(x),
lower = rep(-100, dimension), upper = rep(100, dimension),
popSize = 2000, maxiter = 200,
elitism = 500,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_rsMutation,
pmutation = 0.1,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_waCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_lrSelection,
seed=15334
)
plot(GA1[150:200])
summary(GA1)
GA1
GA1[1]
GA1[,1]
GA1$call
GA1.call
elitism(GA1)
GA1.elitism
GA1$elitism
class(GA1)
attr(GA1)
attr(GA1,elitism)
attributes(GA1)
GA1
attributes(GA1)$summary
attributes(GA1)$summary[100:200,]
plot(attributes(GA1)$summary[100:200,])
plot(attributes(GA1)$summary[100:200,1])
plot(attributes(GA1)$summary[100:200,1],type="l")
plot(attributes(GA1)$summary[100:200,1],type="l",xlab="generation",ylab="best")
plot(attributes(GA1)$summary[100:200,1],type="l",xlab="generation",ylab="best fitness")
GA1 <- ga(type = "real-valued",
fitness =  function(x) -Rosenbrock(x),
lower = rep(-100, dimension), upper = rep(100, dimension),
popSize = 2000, maxiter = 200,
elitism = 500,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_rsMutation,
pmutation = 0.1,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_waCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_lrSelection,
seed=15334
)
summary(GA1)
plot(GA1)
# definicion de la funcion objetivo
Rosenbrock <- function(vector){
if(sum(vector[1:10])>500 || sum(vector[1:10])<-200){
return(-9,697,276,000,000)
}
vector1<-vector+1
sum<-0
for(i in 1:(length(vector)-1)){
sum<-sum + (100*(vector1[i]^2-vector1[i+1])^2+(vector1[i]-1)^2)
}
return(sum)
}
GA1 <- ga(type = "real-valued",
fitness =  function(x) -Rosenbrock(x),
lower = rep(-100, dimension), upper = rep(100, dimension),
popSize = 2000, maxiter = 200,
elitism = 500,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_rsMutation,
pmutation = 0.1,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_waCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_lrSelection,
seed=15334
)
# definicion de la funcion objetivo
Rosenbrock <- function(vector){
if(sum(vector[1:10])>500 || sum(vector[1:10])<200){
return(-9,697,276,000,000)
}
vector1<-vector+1
sum<-0
for(i in 1:(length(vector)-1)){
sum<-sum + (100*(vector1[i]^2-vector1[i+1])^2+(vector1[i]-1)^2)
}
return(sum)
}
GA1 <- ga(type = "real-valued",
fitness =  function(x) -Rosenbrock(x),
lower = rep(-100, dimension), upper = rep(100, dimension),
popSize = 2000, maxiter = 200,
elitism = 500,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_rsMutation,
pmutation = 0.1,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_waCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_lrSelection,
seed=15334
)
# definicion de la funcion objetivo
Rosenbrock <- function(vector){
if(sum(vector[1:10])>500 || sum(vector[1:10])<200){
return(-9697276000000)
}
vector1<-vector+1
sum<-0
for(i in 1:(length(vector)-1)){
sum<-sum + (100*(vector1[i]^2-vector1[i+1])^2+(vector1[i]-1)^2)
}
return(sum)
}
GA1 <- ga(type = "real-valued",
fitness =  function(x) -Rosenbrock(x),
lower = rep(-100, dimension), upper = rep(100, dimension),
popSize = 2000, maxiter = 200,
elitism = 500,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_rsMutation,
pmutation = 0.1,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_waCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_lrSelection,
seed=15334
)
# definicion de la funcion objetivo
Rosenbrock <- function(vector){
if(sum(vector[1:10])>500 || sum(vector[1:10])<200){
return(9697276000000)
}
vector1<-vector+1
sum<-0
for(i in 1:(length(vector)-1)){
sum<-sum + (100*(vector1[i]^2-vector1[i+1])^2+(vector1[i]-1)^2)
}
return(sum)
}
GA1 <- ga(type = "real-valued",
fitness =  function(x) -Rosenbrock(x),
lower = rep(-100, dimension), upper = rep(100, dimension),
popSize = 2000, maxiter = 200,
elitism = 500,
# tipos de mutacion = {gareal_raMutation,gareal_nraMutation,gareal_rsMutation,gareal_powMutation}
mutation=gareal_rsMutation,
pmutation = 0.1,
pcrossover = 0.8,
# tipos de cruce = {gareal_blxCrossover,gareal_waCrossover,gareal_laplaceCrossover,gareal_spCrossover}
crossover=gareal_waCrossover,
# tipos de seleccion {gareal_lrSelection,gareal_nlrSelection,gareal_rwSelection,
#                     gareal_tourSelection, gareal_lsSelection,gareal_sigmaSelection}
optim=TRUE,
selection = gareal_lrSelection,
seed=15334
)
summary(GA1)
plot(GA1)
